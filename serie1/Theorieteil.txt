Alex de-vnu-ll
Mathieu Simon 07-121-650

RA Serie 1
----------

Theorieteil

Aufgabe 1
---------

1) Wie lang (in Bytes) ist der String “Test”?
Gemäss Folie 19 aus dem C-Skript: 
Ist ein Array aus "char", "Strings sind nullterminiert, der Letzte Wert ist 0"

Daraus folgt:
T e s t \0 -> Länge = 5 Bytes


2)
int a[10];

int getAt(int i){
  return a[i];
}

Gleiches Resultat mit Pointerarithmetik
int getAt(int *a, int i) {
	return *(a+i);
}
short a[10];

short getAt(int i) {
 	return a[i];
}

Gleiches Resultat mit Pointerarithmetik
short getAt(short *a, int i) {
 	return *(a+i);
}

Mit der Array-Deklaration wird der erforderliche Speicherplatz reserviert. 
Bei short-Arrays sind dies 2 Bytes, bei int-Arrays 2 oder 4 Bytes pro 
Datenelement. Dadurch kann auch hier mit der Pointerarithmetik der 
entsprechende Wert aufgefunden werden, wie dies auch im Beispiel mit dem 
double-Array, wo die Elemente 8 Bytes lang sind, der Fall war.

3)



	1.
1. Zeile:

void = typenloser Zeiger
-> p zeigt auf die Speicheradresse von b und ist selber typenlose

2. Zeile
Die Speicheradresse von

Adresse von b (&) wird an p übergeben, dass einen Variablen Typ sein kann (void *p)

2. 
Gibr den Hexadezimalwert dieser Adresse (von p) aus:
bff61c

3.


Wird der Cast und dereferenzierung weggelassen wird nochmals die
gleiche Adresse angezeit - erst nachher die Inkrementierung 
der Speicheradresse von P
von p.




Aufgabe 4
---------
j = increment(&i) -> j wird die Rückgabe von increment erhalten

increment(int *x)
-> Es wird ein x übergeben, dass dann auch
   auf Zeile 8 dereferenziert wird.

Reihenfolge auf Zeile 8
 i wird dereferenziert, also 1337
 ++ steht vor der Klammer, also wird inkrementiert und dann zurückgegeben
 Rückgabewert ist somit: 1338 - i wird überschriebem - bzw. zeigt immer noch auf dieselbe Adresse.

Bei *:
Es wird ein Post-Increment gemacht, d.h. es wird zuerst die Rückgabe gemacht, dann
inkrementiert. i=1337, j=1337

zeigt auf die Adresse von i


Aufgabe 5
---------
Ausgabe:
1 1
1 2

Zeile 1 *x -> Erster Wert im array x wird dereferenziert, und bei *px auch

Zeile 5: px++ hat den zeiger inkrementiert bei px und zeigt nun auf den zweiten Wert im Array, also 2


---

Ausgabe bei zweitem Beispiel: 3, 11

Problematisch:
*(px--) überschreibt den Wert vor dem ersten Wert im Array x  - also Speicherbereich 
etwa eines anderen Programmes.


Aufgabe 6
---------
erw


Aufgabe 7
---------

struct {
	char a[4];	-> 4 Bytes benötigt
	char b;		-> 1 Byte  ""
	char c;		-> 1 Byte  "" 
	short int d;	-> 2 Bytes (eines davon das Vorzeichen)
} myStruct;
                           = 8 Bytes Total, einfach addiert

union {
	char a[8];	-> 8 Bytes 
	int b;		-> 1 Byte
	short int d[4]; -> 8 Bytes (je 2 Bytes pro Int x 4)
} myUnion;
			   = Da es eine Union ist, verwendez sie
			     denselben Speicherbereich. (des längsten
			     "Elementes"), also 8 Bytes.

printf("%i", sizeof(myStruct));
printf("%i", sizeof(myUnion));


Bei der Union zeigen alle Eleente auf dieselbe Startadresse, bei der Struct
zeigt jedes Element auf eine eigene. - Richtig?
