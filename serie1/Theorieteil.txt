eRA Serie 1
----------
Thomas Rickenbach 85-116-408
Mathieu Simon	  07-121-650


Theorieteil
-----------

Aufgabe 1
---------
1) Wie lang (in Bytes) ist der String “Test”?
Gemäss Folie 19 aus dem C-Skript: 
Ist ein Array aus "char", "Strings sind nullterminiert, der Letzte Wert ist 0"

Daraus folgt:
T e s t \0 -> Länge = 5 Bytes


2)
Falls die Frage gestellt wäre, dass mittels shorts oder ints
ein double-Array abgebildet werden müsste, wäre das hier natürlich 
nicht korrekt.

Mit einem Int-Array (ohne Pointerarithmetik)

int a[10];			short a[10];

int getAt(int i){		short getAt(short i){
  return a[i];				return a[i];
}				}

Der Unteschied hier liegt im Speicherverbauch zwischen int, short und double:
double x 10 --> 8 Bytes pro Element	   = 80 Bytes
int    x 10 --> 2 oder 4 Bytes pro Element = 20 oder 40 Bytes
short  x 10 --> 2 Bytes pro Element        = 20 Bytes


Gleiches Resultat mit Pointerarithmetik:

short getAt(short *a, int i) {		int getAt(int *a, int i) {
 	return *(a+i); 				return *(a+i);
}					}

Mit der Array-Deklaration wird der erforderliche Speicherplatz reserviert. 
Bei short-Arrays sind dies 2 Bytes, bei int-Arrays 2 oder 4 Bytes pro 
Datenelement. Dadurch kann auch hier mit der Pointerarithmetik der 
entsprechende Wert aufgefunden werden, wie dies auch im Beispiel mit dem 
double-Array, wo die Elemente 8 Bytes lang sind, der Fall war.

Aufgabe 3
---------
Intel ist auch Little Endian, also lässt sich das auch mit einem realen Programm
testen - Auf einer SPARC-Maschine allerdings nicht.

long a = 1234567890; /* Hex: 499602d2 */
long b = 987654321; /* Hex: 3ade68b1 */

void * p = &b;
-> Void: p ist typenlos, nicht fest vorgegeben.

printf("%x\n",p);
-> Ausgabe: bffff844
   Grund: p Zeigt nur auf die Adresse von b, es wird nicht dereferenziert,
	  die Speicheradresse wird also ausgegeben

printf("%x\n", *(long*)p++);
   Der Zeiger von p wird NACH der Ausgabe um 1 erhöht, der Wert
   an der Speicheradresse bffff844 wird als long gecastet.

-> Ausgabe: 3ade68b1 

   Das wäre ja der Hex-Wert von long b, warum genau, können wir nicht erklären. - Wird 
   etwa bei diesem Cast zwangsläufig versucht den gesamten
   long b zu casten - ausgeben von dieser Speicheradresse, auf die p zeigt quasi die 
   Werte "zusammengesucht"

printf("%x\n",*(char*)p++);
-> Ausgabe: 68
   ... danach Inkrementierung. Der Wert an Speicheradresse a wird als char gecastet, 
   der Hex-Wert also einfach widergegeben, deshalb: 68.

printf("%x\n",*(char*)p++);
-> Ausgabe: Der Inhalt an der Speicheradresse bffff846 wird als char gecastet ausgegeben, also wäre das "de",
    anschliessend wird der Zeiger p inkrementiert. - Dachten wir.
    (Beim Beispiel aus dem Forum funktioniert das auch, aber hier erhielten wir stattdessen immer ffffffde).
    Vielleicht entsteht das durch die Formatierung als Hex, dass fffff zum auffüllen verwendet wird?

printf("%x\n",p);
-> Ausgabe: bffff847
   Insgesamt wurde p 3x inkrementiert, es wird nicht dereferenziert, also wird der 
   Name der Speicheradresse ausgegeben.


Aufgabe 4
---------
Variante 1:
i = 1338
j = 1338

Es wird ein pre-Increment verwendet, also Wert inkrementiert an j zurückgegeben.
Da aber die Speicheradresse übergeben wurde von i, wurde dieses ("auch") inkrementiert.

Variante 2:
i = 1338
j = 1337

Auch hier die Inkrementierung auf dem Speicher, der von i verwendet wird, durchgeführt,
aber ein post-Increment durchgeführt. - Der Wert wird an j zurückgegeben, anschliessend
der Wert von i inkrementiert.


Aufgabe 5
---------
Ausgabe:
1 1
1 2

Zeile 1 *x -> Erster Wert im array x wird dereferenziert, und bei *px auch

Zeile 5: px++ hat den zeiger inkrementiert bei px und zeigt nun auf den zweiten Wert im Array, also 2

---

Ausgabe bei zweitem Beispiel: 3, 11

Problematisch:
*(px--) überschreibt den Wert vor dem ersten Wert im Array x  - also Speicherbereich 
etwa eines anderen Programmes.


Aufgabe 6
----------
struct {
	char a[4];	-> 4 Bytes benötigt
	char b;		-> 1 Byte  ""
	char c;		-> 1 Byte  "" 
	short int d;	-> 2 Bytes (eines davon das Vorzeichen)
} myStruct;
                           = 8 Bytes Total, einfach addiert

union {
	char a[8];	-> 8 Bytes 
	int b;		-> 1 Byte
	short int d[4]; -> 8 Bytes (je 2 Bytes pro Int x 4)
} myUnion;
			   = Da es eine Union ist, verwendet sie
			     denselben Speicherbereich. 
			     (des längsten "Elementes"), also 8 Bytes.

printf("%i", sizeof(myStruct));
printf("%i", sizeof(myUnion));

Bei der Union zeigen alle Elemente auf dieselbe Startadresse, bei der Struct
zeigt jedes Element auf eine eigene.


Aufgabe 7
---------

 1 #define callA callB(1)
 2 
 3 void callB(int a) {
 4	printf("%i\n", a+2);
 5 }
 6 
 7 int main() {
 8 	callA;
 9 	return EXIT_SUCCESS;
10 }


1 -> Präprozessoranweisung, ersetzt alle Vorkommnisse im Quellcode
     von callA durch den Aufruf von callB(1). Kann Code abkürzen, oft
     verwendet um Konstanten zu definieren.

9 -> Effektiv steht callB(1), die Funktion callB wird mit dem Parameter
     a=1 aufgerufen, dann ausgabe von in Zeile 4

4 -> Als Integer (%i) formatiert, abgeschlossen von einer neuen Zeile:
     a + 2 -> 1 + 2 -> "3" wird ausgegeben.
